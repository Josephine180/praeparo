generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                Int                @id @default(autoincrement())
  email             String             @unique @db.VarChar(255)
  name              String
  firstname         String
  password_hash     String             @db.VarChar(255)
  created_at        DateTime           @default(now())
  role              String             @default("user")
  feedbacks         Feedback[]
  profile           Profile?
  sessionProgresses SessionProgress[]
  trainingPlans     TrainingPlan[]
  userTrainingPlans UserTrainingPlan[]
}

model Profile {
  id        Int    @id @default(autoincrement())
  userId    Int    @unique
  firstName String
  lastName  String
  weight    Float
  height    Float
  email     String
  user      User   @relation(fields: [userId], references: [id])
}

model TrainingPlan {
  id         Int                @id @default(autoincrement())
  user_id    Int
  goal_type  String             @db.VarChar(100)
  goal_time  String             @db.VarChar(50)
  created_at DateTime           @default(now())
  sessions   Session[]
  user       User               @relation(fields: [user_id], references: [id])
  users      UserTrainingPlan[]
  weeks      Week[]
}

model UserTrainingPlan {
  id               Int          @id @default(autoincrement())
  user_id          Int
  training_plan_id Int
  started_at       DateTime     @default(now())
  trainingPlan     TrainingPlan @relation(fields: [training_plan_id], references: [id])
  user             User         @relation(fields: [user_id], references: [id])

  @@unique([user_id, training_plan_id])
}

model Week {
  id               Int          @id @default(autoincrement())
  training_plan_id Int
  week_number      Int
  description      String?
  sessions         Session[]
  trainingPlan     TrainingPlan @relation(fields: [training_plan_id], references: [id])

  @@unique([training_plan_id, week_number])
}

model Session {
  id                Int               @id @default(autoincrement())
  training_plan_id  Int
  week_id           Int
  session_number    Int
  session_order     Int
  date              DateTime          @db.Date
  title             String            @db.VarChar(255)
  description       String
  duree             Int
  completed         Boolean           @default(false)
  nutrition_tip_id  Int
  feedbacks         Feedback[]
  nutritionTip      NutritionTip      @relation(fields: [nutrition_tip_id], references: [id])
  trainingPlan      TrainingPlan      @relation(fields: [training_plan_id], references: [id])
  week              Week              @relation(fields: [week_id], references: [id])
  sessionProgresses SessionProgress[]
}

model SessionProgress {
  id         Int     @id @default(autoincrement())
  user_id    Int
  session_id Int
  completed  Boolean @default(false)
  session    Session @relation(fields: [session_id], references: [id])
  user       User    @relation(fields: [user_id], references: [id])

  @@unique([user_id, session_id])
}

model Feedback {
  id               Int      @id @default(autoincrement())
  session_id       Int
  user_id          Int
  energy_level     Int      @db.SmallInt
  fatigue_level    Int      @db.SmallInt
  motivation_level Int      @db.SmallInt
  comment          String?
  created_at       DateTime @default(now())
  session          Session  @relation(fields: [session_id], references: [id])
  user             User     @relation(fields: [user_id], references: [id])

  @@unique([session_id, user_id])
}

model NutritionTip {
  id          Int       @id @default(autoincrement())
  week_number Int
  plan_type   String    @db.VarChar(50)
  tip_text    String
  sessions    Session[]
}
